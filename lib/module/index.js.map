{"version":3,"sources":["index.tsx"],"names":["NativeModules","ThermalPrinterModule","defaultConfig","macAddress","ip","port","payload","autoCut","openCashbox","mmFeedPaper","printerDpi","printerWidthMM","printerNbrCharactersPerLine","timeout","getConfig","args","Object","assign","printTcpRaw","message","printTcp","printBluetooth","getBluetoothDeviceList"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AAyCA,MAAM;AAAEC,EAAAA;AAAF,IACJD,aADF;AA8BA,IAAIE,aAA0D,GAAG;AAC/DC,EAAAA,UAAU,EAAE,EADmD;AAE/DC,EAAAA,EAAE,EAAE,iBAF2D;AAG/DC,EAAAA,IAAI,EAAE,IAHyD;AAI/DC,EAAAA,OAAO,EAAE,EAJsD;AAK/DC,EAAAA,OAAO,EAAE,IALsD;AAM/DC,EAAAA,WAAW,EAAE,KANkD;AAO/DC,EAAAA,WAAW,EAAE,EAPkD;AAQ/DC,EAAAA,UAAU,EAAE,GARmD;AAS/DC,EAAAA,cAAc,EAAE,EAT+C;AAU/DC,EAAAA,2BAA2B,EAAE,EAVkC;AAW/DC,EAAAA,OAAO,EAAE;AAXsD,CAAjE;;AAcA,MAAMC,SAAS,GACbC,IADgB,IAES;AACzB,SAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,aAAlB,EAAiCa,IAAjC,CAAP;AACD,CAJD;;AAMA,MAAMG,WAAW,GAAG,MAClBH,IADkB,IAEA;AAClB,QAAM;AACJX,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJc,IAAAA,OAHI;AAIJN,IAAAA;AAJI,MAKFG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AACpBb,IAAAA,EAAE,EAAE,EADgB;AAEpBC,IAAAA,IAAI,EAAE,IAFc;AAGpBQ,IAAAA,OAAO,EAAE,KAHW;AAIpBM,IAAAA,OAAO,EAAE;AAJW,GAAlB,EAKDJ,IALC,CALJ;AAYA,QAAMd,oBAAoB,CAACiB,WAArB,CACJd,EADI,EAEJC,IAFI,EAGJc,OAHI,EAIJN,OAJI,CAAN;AAMD,CArBD;;AAuBA,MAAMO,QAAQ,GAAG,MACfL,IADe,IAEG;AAClB,QAAM;AACJX,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,cARI;AASJC,IAAAA,2BATI;AAUJC,IAAAA;AAVI,MAWFC,SAAS,CAACC,IAAD,CAXb;AAaA,QAAMd,oBAAoB,CAACmB,QAArB,CACJhB,EADI,EAEJC,IAFI,EAGJC,OAHI,EAIJC,OAJI,EAKJC,WALI,EAMJC,WANI,EAOJC,UAPI,EAQJC,cARI,EASJC,2BATI,EAUJC,OAVI,CAAN;AAYD,CA5BD;;AA8BA,MAAMQ,cAAc,GAClBN,IADqB,IAEH;AAClB,QAAM;AACJZ,IAAAA,UADI;AAEJG,IAAAA,OAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA;AARI,MASFE,SAAS,CAACC,IAAD,CATb;AAWA,SAAOd,oBAAoB,CAACoB,cAArB,CACLlB,UADK,EAELG,OAFK,EAGLC,OAHK,EAILC,WAJK,EAKLC,WALK,EAMLC,UANK,EAOLC,cAPK,EAQLC,2BARK,CAAP;AAUD,CAxBD;;AA0BA,MAAMU,sBAAsB,GAAG,MAAmC;AAChE,SAAOrB,oBAAoB,CAACqB,sBAArB,EAAP;AACD,CAFD;;AAIA,eAAe;AACbF,EAAAA,QADa;AAEbF,EAAAA,WAFa;AAGbG,EAAAA,cAHa;AAIbnB,EAAAA,aAJa;AAKboB,EAAAA;AALa,CAAf","sourcesContent":["import { NativeModules } from 'react-native';\n\ntype BluetoothPrinter = {\n  deviceName: string;\n  macAddress: string;\n};\n\ntype NativeModuleType = typeof NativeModules & {\n  ThermalPrinterModule: {\n    printTcp(\n      ip: string,\n      port: number,\n      payload: string,\n      autoCut: boolean,\n      openCashbox: boolean,\n      mmFeedPaper: number,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number,\n      timeout: number\n    ): Promise<void>;\n    printTcpRaw(\n      ip: string,\n      port: number,\n      message: Array<number>,\n      timeout: number\n    ): Promise<void>;\n    printBluetooth(\n      macAddress: string,\n      payload: string,\n      autoCut: boolean,\n      openCashbox: boolean,\n      mmFeedPaper: number,\n      printerDpi: number,\n      printerWidthMM: number,\n      printerNbrCharactersPerLine: number\n    ): Promise<void>;\n    getBluetoothDeviceList(): Promise<BluetoothPrinter[]>;\n  };\n};\n\nconst { ThermalPrinterModule }: NativeModuleType =\n  NativeModules as NativeModuleType;\n\ninterface PrinterInterface {\n  payload: string;\n  autoCut: boolean;\n  openCashbox: boolean;\n  mmFeedPaper: number;\n  printerDpi: number;\n  printerWidthMM: number;\n  printerNbrCharactersPerLine: number;\n}\n\ninterface PrintTcpInterface extends PrinterInterface {\n  ip: string;\n  port: number;\n  timeout: number;\n}\n\ninterface PrintTcpRawInterface {\n  ip: string;\n  port: number;\n  message: Array<number>;\n  timeout: number;\n}\n\ninterface PrintBluetoothInterface extends PrinterInterface {\n  macAddress: string;\n}\n\nlet defaultConfig: PrintTcpInterface & PrintBluetoothInterface = {\n  macAddress: '',\n  ip: '192.168.192.168',\n  port: 9100,\n  payload: '',\n  autoCut: true,\n  openCashbox: false,\n  mmFeedPaper: 20,\n  printerDpi: 203,\n  printerWidthMM: 80,\n  printerNbrCharactersPerLine: 42,\n  timeout: 30000,\n};\n\nconst getConfig = (\n  args: Partial<typeof defaultConfig>\n): typeof defaultConfig => {\n  return Object.assign({}, defaultConfig, args);\n};\n\nconst printTcpRaw = async (\n  args: Partial<PrintTcpRawInterface> & Pick<PrinterInterface, 'payload'>\n): Promise<void> => {\n  const {\n    ip,\n    port,\n    message,\n    timeout,\n  } = Object.assign({}, {\n    ip: '',\n    port: 9100,\n    timeout: 30000,\n    message: []\n  }, args);\n\n  await ThermalPrinterModule.printTcpRaw(\n    ip,\n    port,\n    message,\n    timeout\n  );\n};\n\nconst printTcp = async (\n  args: Partial<PrintTcpInterface> & Pick<PrinterInterface, 'payload'>\n): Promise<void> => {\n  const {\n    ip,\n    port,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    timeout,\n  } = getConfig(args);\n\n  await ThermalPrinterModule.printTcp(\n    ip,\n    port,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n    timeout\n  );\n};\n\nconst printBluetooth = (\n  args: Partial<PrintBluetoothInterface> & Pick<PrinterInterface, 'payload'>\n): Promise<void> => {\n  const {\n    macAddress,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine,\n  } = getConfig(args);\n\n  return ThermalPrinterModule.printBluetooth(\n    macAddress,\n    payload,\n    autoCut,\n    openCashbox,\n    mmFeedPaper,\n    printerDpi,\n    printerWidthMM,\n    printerNbrCharactersPerLine\n  );\n};\n\nconst getBluetoothDeviceList = (): Promise<BluetoothPrinter[]> => {\n  return ThermalPrinterModule.getBluetoothDeviceList();\n};\n\nexport default {\n  printTcp,\n  printTcpRaw,\n  printBluetooth,\n  defaultConfig,\n  getBluetoothDeviceList,\n};\n"]}